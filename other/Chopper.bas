'(C) 2019 T&T Ware



DEFINT A-Z

CONST NumberOfSheep = 25

CONST ScreenWidth = 640
CONST ScreenHeight = 360
CONST PlayerWidth = 25
CONST PlayerHeight = 25
CONST AantalFrames = 8
CONST Pi2# = 8 * ATN(1)

SpriteGrootte = (4 + INT((PlayerWidth * 8 + 7) / 8) * PlayerHeight) / 2 + 1
CursorSpriteGrootte = (4 + INT((7 * 8 + 7) / 8) * 7) / 2 + 1

REDIM Player(0 TO AantalFrames * SpriteGrootte)
REDIM PlayerMask(0 TO AantalFrames * SpriteGrootte)
REDIM PlayerBackground(0 TO AantalFrames * SpriteGrootte)
REDIM Cursor(0 TO CursorSpriteGrootte)
REDIM CursorMask(0 TO CursorSpriteGrootte)
REDIM CursorBackground(0 TO CursorSpriteGrootte)

REDIM x#(1 TO NumberOfSheep)
REDIM y#(1 TO NumberOfSheep)
REDIM Speedx#(1 TO NumberOfSheep)
REDIM Speedy#(1 TO NumberOfSheep)


REDIM Status(1 TO NumberOfSheep)

SCREEN _NEWIMAGE(ScreenWidth, ScreenHeight, 256)

_FULLSCREEN

GOSUB Graphics

FOR s = 1 TO NumberOfSheep
    x#(s) = 20 + (ScreenWidth - 40) * RND
    y#(s) = 20 + (ScreenHeight - 40) * RND
    Status(s) = 1
NEXT

count% = 0
Limit = 120
FrameNummer = 1

xp# = ScreenWidth / 2 - PlayerWidth / 2
yp# = ScreenHeight / 2 - PlayerHeight / 2

_MOUSEHIDE

CLS

FOR yy = 0 TO ScreenHeight - 1
    FOR xx = 0 TO ScreenWidth - 1
        PSET (xx, yy), 32 + 15 * RND
    NEXT
NEXT

Startlabel:

_LIMIT Limit

i$ = INKEY$

IF i$ = CHR$(27) THEN SYSTEM
IF i$ = "," THEN BEEP: Limit = Limit - 10
IF i$ = "." THEN BEEP: Limit = Limit + 10

PUT (x, y), PlayerBackground(FrameNummer * SpriteGrootte), PSET
PUT (h, v), CursorBackground(0), PSET

FOR s = 1 TO NumberOfSheep
    PUT (x#(s), y#(s)), Sheep(SheepSize * Status(s))
    Status(s) = 1
NEXT





Mouse 3

h = HMouse - 3
v = VMouse - 3

IF h < 0 THEN h = 0
IF h > ScreenWidth - 7 THEN h = ScreenWidth - 7
IF v < 0 THEN v = 0
IF v > ScreenHeight - 7 THEN v = ScreenHeight - 7

IF BMouse = 2 THEN SYSTEM

sx# = (3 + h - (x + PlayerWidth \ 2)) / 40
sy# = (3 + v - (y + PlayerHeight \ 2)) / 40
IF sx# > 1 THEN sx# = 1
IF sx# < -1 THEN sx# = -1
IF sy# > 1 THEN sy# = 1
IF sy# < -1 THEN sy# = -1

count% = count% + 1

xp# = xp# + sx#
yp# = yp# + sy#

IF xp# > ScreenWidth - PlayerWidth THEN xp# = ScreenWidth - PlayerWidth: sx# = 0
IF xp# < 0 THEN xp# = 0: sx# = 0
IF yp# > ScreenHeight - PlayerHeight THEN yp# = ScreenHeight - PlayerHeight: sy# = 0
IF yp# < 0 THEN yp# = 0: sy# = 0

x = INT(xp#)
y = INT(yp#)

Hoek# = _ATAN2((h + 3) - (x + 12), (y + 12) - (v + 3))

WHILE Hoek# < 0: Hoek# = Hoek# + Pi2#: WEND
WHILE Hoek# > Pi2#: Hoek# = Hoek# - Pi2#: WEND

FrameNummer = 8 * (Hoek# / Pi2#)
IF FrameNummer > AantalFrames - 1 THEN FrameNummer = 0

GET (h, v)-(h + 6, v + 6), CursorBackground(0)
PUT (h, v), CursorMask(0), AND
PUT (h, v), Cursor(0), XOR

GET (x, y)-(x + (PlayerWidth - 1), y + (PlayerHeight - 1)), PlayerBackground(FrameNummer * SpriteGrootte)
PUT (x, y), PlayerMask(FrameNummer * SpriteGrootte), AND
PUT (x, y), Player(FrameNummer * SpriteGrootte), XOR

_DISPLAY

GOTO Startlabel


Graphics:
'              Blue                   Green                    Red
'                           Grey/White
FOR c = 16 TO 31
    PALETTE c, 65536 * (c - 16) * 4 + 256 * (c - 16) * 4 + (c - 16) * 4
NEXT
'                           Background
FOR c = 32 TO 47
    PALETTE c, 65536 * (c - 32) * 0 + 256 * (c - 32) * 3 + (c - 32) * 0
NEXT
'                           Light-Blue
FOR c = 48 TO 63
    PALETTE c, 65536 * (c - 48) * 4 + 256 * (c - 48) * 2 + (c - 48) * 2
NEXT
'                           Light-Browm
FOR c = 64 TO 79
    PALETTE c, 65536 * (c - 64) * 2 + 256 * (c - 64) * 2 + (c - 64) * 4
NEXT
'                           Bright-Red
FOR c = 80 TO 95
    PALETTE c, 65536 * (c - 80) * 2 + 256 * (c - 80) * 2 + (c - 80) * 4
NEXT

RESTORE cursor
CLS
FOR y = 0 TO 6
    READ line$
    FOR x = 0 TO 6
        Column$ = MID$(line$, x + 1, 1)
        SELECT CASE Column$
            CASE "1": PSET (x, y), 24
            CASE "2": PSET (x, y), 25
            CASE "3": PSET (x, y), 26
            CASE "4": PSET (x, y), 27
            CASE "5": PSET (x, y), 28
            CASE "6": PSET (x, y), 29
            CASE "7": PSET (x, y), 63
            CASE "8": PSET (x, y), 31
        END SELECT
    NEXT
NEXT
GET (0, 0)-(6, 6), Cursor(0)
FOR y = 0 TO 6
    FOR x = 0 TO 6
        IF POINT(x, y) = 0 THEN PSET (x, y), 255 ELSE PSET (x, y), 0
    NEXT
NEXT
GET (0, 0)-(6, 6), CursorMask(0)


RESTORE Ship
FOR an = 0 TO AantalFrames - 1
    CLS
    FOR y = 0 TO PlayerHeight - 1
        READ line$
        FOR x = 0 TO PlayerWidth - 1
            Column$ = MID$(line$, x + 1, 1)
            SELECT CASE Column$
                CASE "1": PSET (x, y), 24
                CASE "2": PSET (x, y), 25
                CASE "3": PSET (x, y), 26
                CASE "4": PSET (x, y), 27
                CASE "5": PSET (x, y), 28
                CASE "6": PSET (x, y), 29
                CASE "7": PSET (x, y), 95
                CASE "8": PSET (x, y), 31
            END SELECT
        NEXT
    NEXT
    GET (0, 0)-(PlayerWidth - 1, PlayerHeight - 1), Player(an * SpriteGrootte)
    FOR y = 0 TO PlayerHeight - 1
        FOR x = 0 TO PlayerWidth - 1
            IF POINT(x, y) = 0 THEN PSET (x, y), 255 ELSE PSET (x, y), 0
        NEXT
    NEXT
    GET (0, 0)-(PlayerWidth - 1, PlayerHeight - 1), PlayerMask(an * SpriteGrootte)
NEXT


RETURN
cursor:
DATA ...8...
DATA ...8...
DATA .......
DATA 88.7.88
DATA .......
DATA ...8...
DATA ...8...

Ship:
DATA .........................
DATA .........................
DATA .........................
DATA .........................
DATA ..........88888..........
DATA ........88.....88........
DATA .......8.........8.......
DATA ......8...........8......
DATA .....8.............8.....
DATA .....8.............8.....
DATA ....8......777......8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8.....77777.....8....
DATA .....8.....777.....8.....
DATA .....8.....777.....8.....
DATA ......8....777....8......
DATA .......8...777...8.......
DATA ........88.777.88........
DATA ..........88888..........
DATA ...........777...........
DATA ...........777...........
DATA ............7............
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA .........................
DATA ..........88888..........
DATA ........88.....88........
DATA .......8.........8.......
DATA ......8...........8......
DATA .....8.............8.....
DATA .....8.............8.....
DATA ....8......777......8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8....77777......8....
DATA .....8..777........8.....
DATA .....8.777.........8.....
DATA ......877.........8......
DATA .....778.........8.......
DATA ....777.88.....88........
DATA ...777....88888..........
DATA ...77....................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA .........................
DATA ..........88888..........
DATA ........88.....88........
DATA .......8.........8.......
DATA ......8...........8......
DATA .....8.............8.....
DATA .....8.............8.....
DATA ....8.....7777......8....
DATA ..778777777...7.....8....
DATA .7778777777.8.7.....8....
DATA ..778777777...7.....8....
DATA ....8.....7777......8....
DATA .....8.............8.....
DATA .....8.............8.....
DATA ......8...........8......
DATA .......8.........8.......
DATA ........88.....88........
DATA ..........88888..........
DATA .........................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA ...77....................
DATA ...777....88888..........
DATA ....777.88.....88........
DATA .....778.........8.......
DATA ......877.........8......
DATA .....8.777.........8.....
DATA .....8..777........8.....
DATA ....8....77777......8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8......777......8....
DATA .....8.............8.....
DATA .....8.............8.....
DATA ......8...........8......
DATA .......8.........8.......
DATA ........88.....88........
DATA ..........88888..........
DATA .........................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA ............7............
DATA ...........777...........
DATA ...........777...........
DATA ..........88888..........
DATA ........88.777.88........
DATA .......8...777...8.......
DATA ......8....777....8......
DATA .....8.....777.....8.....
DATA .....8.....777.....8.....
DATA ....8.....77777.....8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8......777......8....
DATA .....8.............8.....
DATA .....8.............8.....
DATA ......8...........8......
DATA .......8.........8.......
DATA ........88.....88........
DATA ..........88888..........
DATA .........................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA ....................77...
DATA ..........88888....777...
DATA ........88.....88.777....
DATA .......8.........877.....
DATA ......8.........778......
DATA .....8.........777.8.....
DATA .....8........777..8.....
DATA ....8......77777....8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8......777......8....
DATA .....8.............8.....
DATA .....8.............8.....
DATA ......8...........8......
DATA .......8.........8.......
DATA ........88.....88........
DATA ..........88888..........
DATA .........................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA .........................
DATA ..........88888..........
DATA ........88.....88........
DATA .......8.........8.......
DATA ......8...........8......
DATA .....8.............8.....
DATA .....8.............8.....
DATA ....8......7777.....8....
DATA ....8.....7...777777877..
DATA ....8.....7.8.7777778777.
DATA ....8.....7...777777877..
DATA ....8......7777.....8....
DATA .....8.............8.....
DATA .....8.............8.....
DATA ......8...........8......
DATA .......8.........8.......
DATA ........88.....88........
DATA ..........88888..........
DATA .........................
DATA .........................
DATA .........................
DATA .........................
'
DATA .........................
DATA .........................
DATA .........................
DATA .........................
DATA ..........88888..........
DATA ........88.....88........
DATA .......8.........8.......
DATA ......8...........8......
DATA .....8.............8.....
DATA .....8.............8.....
DATA ....8......777......8....
DATA ....8.....7...7.....8....
DATA ....8.....7.8.7.....8....
DATA ....8.....7...7.....8....
DATA ....8......77777....8....
DATA .....8........777..8.....
DATA .....8.........777.8.....
DATA ......8.........778......
DATA .......8.........877.....
DATA ........88.....88.777....
DATA ..........88888....777...
DATA ....................77...
DATA .........................
DATA .........................
DATA .........................

'                                           "MOUSE" Sub-Routine Copyright 1999 by: Daryl R. Dubbs
SUB Mouse (Funk) STATIC '                   Define sub & parameter(s) passed.
SHARED BMouse, HMouse, VMouse '             Share variables with main sub.
IF Funk = 1 THEN Crsr = 1 '                 Show Cursor.
IF Funk = 2 AND Crsr = 0 THEN EXIT SUB '    Don't hide Cursor more than once.
IF Funk = 2 AND Crsr = 1 THEN Crsr = 0 '    Hide Cursor.
POKE 100, 184: POKE 101, Funk: POKE 102, 0 'Poke machine code necessary for
POKE 103, 205: POKE 104, 51: POKE 105, 137 'using the mouse into memory
POKE 106, 30: POKE 107, 170: POKE 108, 10 ' starting at offset 100 in the
POKE 109, 137: POKE 110, 14: POKE 111, 187 'current segment.  This code is
POKE 112, 11: POKE 113, 137: POKE 114, 22 ' then executed as a unit, via the
POKE 115, 204: POKE 116, 12: POKE 117, 203 'statement " Call Absolute ".
CALL ABSOLUTE(100) '                        Call machine code.
BMouse = PEEK(&HAAA) '                      Get values for: Buttons
HMouse = PEEK(&HBBB) + PEEK(&HBBC) * 256 '  Horizontal position ( 2 bytes )
VMouse = PEEK(&HCCC) + PEEK(&HCCD) * 256 '  Vertical position ( 2 bytes )
END SUB '                                   End of sub-program.






